name: Release Creation

on:
  workflow_run:
    workflows: ["CMake on multiple platforms", "Bindings Pipeline"]
    types:
      - completed
    branches: [main, dev]

permissions:
  contents: write
  checks: read
  actions: read

jobs:
  check-workflows-and-tag:
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check_release.outputs.should_release }}
      tag_name: ${{ steps.check_tag.outputs.tag_name }}
    steps:
      - name: Debug Workflow Info
        run: |
          echo "Workflow run ID: ${{ github.event.workflow_run.id }}"
          echo "Workflow name: ${{ github.event.workflow_run.name }}"
          echo "Head SHA: ${{ github.event.workflow_run.head_sha }}"
          echo "Head branch: ${{ github.event.workflow_run.head_branch }}"
          echo "Conclusion: ${{ github.event.workflow_run.conclusion }}"

      # Check if this is a tag commit and which workflows have run
      - name: Check workflows completion and tag
        id: check_release
        run: |
          # Only proceed if the triggering workflow succeeded
          if [[ "${{ github.event.workflow_run.conclusion }}" != "success" ]]; then
            echo "Triggering workflow did not succeed"
            echo "should_release=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Get head SHA for this run
          HEAD_SHA="${{ github.event.workflow_run.head_sha }}"
          echo "Commit SHA: $HEAD_SHA"

          # Check if both workflows have completed successfully for this SHA
          echo "Checking CMake workflow..."
          CMAKE_RUNS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/cmake.yml/runs?status=completed&head_sha=$HEAD_SHA")

          CMAKE_SUCCESS=$(echo "$CMAKE_RUNS" | jq '.workflow_runs | map(select(.conclusion == "success")) | length')
          echo "CMake successful runs: $CMAKE_SUCCESS"

          echo "Checking Bindings workflow..."
          BINDINGS_RUNS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/bindings.yml/runs?status=completed&head_sha=$HEAD_SHA")

          BINDINGS_SUCCESS=$(echo "$BINDINGS_RUNS" | jq '.workflow_runs | map(select(.conclusion == "success")) | length')
          echo "Bindings successful runs: $BINDINGS_SUCCESS"

          # Check if this commit has any tags
          echo "Checking for tags..."
          TAGS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/git/refs/tags")

          # Find tags that point to this commit
          MATCHING_TAGS=$(echo "$TAGS" | jq -r ".[] | select(.object.sha == \"$HEAD_SHA\") | .ref" | sed 's|refs/tags/||')
          echo "Matching tags: $MATCHING_TAGS"

          # Make decision
          if [[ "$CMAKE_SUCCESS" -gt 0 && "$BINDINGS_SUCCESS" -gt 0 && -n "$MATCHING_TAGS" ]]; then
            # Both workflows succeeded and there's at least one tag - proceed with release
            echo "Both workflows succeeded and tag found - should create release"
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            # Conditions not met - don't proceed
            echo "Not all conditions met for release:"
            echo "- CMake success: $CMAKE_SUCCESS (need > 0)"
            echo "- Bindings success: $BINDINGS_SUCCESS (need > 0)"
            echo "- Tags found: $MATCHING_TAGS"
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Find appropriate tag
        id: check_tag
        if: steps.check_release.outputs.should_release == 'true'
        run: |
          HEAD_SHA="${{ github.event.workflow_run.head_sha }}"

          # Fetch all tags that point to this commit
          TAGS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/git/refs/tags")

          # Find tags that point to this commit
          MATCHING_TAGS=$(echo "$TAGS" | jq -r ".[] | select(.object.sha == \"$HEAD_SHA\") | .ref" | sed 's|refs/tags/||')

          # Try to find a version tag first (starts with v)
          for TAG in $MATCHING_TAGS; do
            if [[ "$TAG" == v* ]]; then
              echo "Using version tag: $TAG"
              echo "tag_name=$TAG" >> $GITHUB_OUTPUT
              exit 0
            fi
          done

          # If no version tag found, use the first tag
          TAG=$(echo "$MATCHING_TAGS" | head -n 1)
          echo "No version tag found, using first tag: $TAG"
          echo "tag_name=$TAG" >> $GITHUB_OUTPUT

  create-release:
    needs: check-workflows-and-tag
    if: needs.check-workflows-and-tag.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Debug Info
        run: |
          echo "Creating release for tag: ${{ needs.check-workflows-and-tag.outputs.tag_name }}"

      # Download CMake workflow artifacts
      - name: Download CMake Workflow Artifacts
        uses: dawidd6/action-download-artifact@v6
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: cmake.yml
          workflow_conclusion: success
          commit: ${{github.event.workflow_run.head_sha}}
          path: artifacts/cmake
          check_artifacts: true
          search_artifacts: true

      - name: Verify Downloaded CMake Artifacts
        run: |
          echo "Listing downloaded CMake artifacts:"
          find artifacts/cmake -type f | sort

      # Download bindings artifacts
      - name: Download Swift Package
        uses: dawidd6/action-download-artifact@v6
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: bindings.yml
          name: swift_package
          workflow_conclusion: success
          commit: ${{github.event.workflow_run.head_sha}}
          path: artifacts/swift_package
          check_artifacts: true
          search_artifacts: true

      - name: Download WASM Package
        uses: dawidd6/action-download-artifact@v6
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: bindings.yml
          name: c4-wasm
          workflow_conclusion: success
          commit: ${{github.event.workflow_run.head_sha}}
          path: artifacts/wasm
          check_artifacts: true
          search_artifacts: true

      - name: Download AAR Package
        uses: dawidd6/action-download-artifact@v6
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: bindings.yml
          name: colibri-aar
          workflow_conclusion: success
          commit: ${{github.event.workflow_run.head_sha}}
          path: artifacts/aar
          check_artifacts: true
          search_artifacts: true

      - name: Download JAR Package
        uses: dawidd6/action-download-artifact@v6
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: bindings.yml
          name: colibri-jar
          workflow_conclusion: success
          commit: ${{github.event.workflow_run.head_sha}}
          path: artifacts/jar
          check_artifacts: true
          search_artifacts: true

      - name: Prepare Release Files
        run: |
          cd artifacts

          # Create release files directory
          mkdir -p release_files

          # Zip Swift package if not already zipped
          if [ -d "swift_package" ] && [ "$(ls -A swift_package)" ]; then
            cd swift_package
            zip -r ../colibri-swift-package.zip ./*
            cd ..
            mv colibri-swift-package.zip release_files/
          else
            echo "Warning: Swift package directory is empty or does not exist"
          fi

          # Move WASM files
          if [ -d "wasm" ] && [ "$(ls -A wasm)" ]; then
            mv wasm/*.zip release_files/ 2>/dev/null || echo "No zip files in wasm directory"
          else
            echo "Warning: WASM directory is empty or does not exist"
          fi

          # Move AAR files
          if [ -d "aar" ] && [ "$(ls -A aar)" ]; then
            mv aar/*.aar release_files/ 2>/dev/null || echo "No aar files in aar directory"
          else
            echo "Warning: AAR directory is empty or does not exist"
          fi

          # Move JAR files
          if [ -d "jar" ] && [ "$(ls -A jar)" ]; then
            mv jar/*.jar release_files/ 2>/dev/null || echo "No jar files in jar directory"
          else
            echo "Warning: JAR directory is empty or does not exist"
          fi

          # Move CMake artifacts
          find cmake -type f \( -name "*.zip" -o -name "*.tar.gz" \) -exec cp {} release_files/ \; 2>/dev/null || echo "No CMake artifacts found"

          # List all collected release files
          echo "Collected release files:"
          ls -la release_files/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.check-workflows-and-tag.outputs.tag_name }}
          files: artifacts/release_files/*
          generate_release_notes: true
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
