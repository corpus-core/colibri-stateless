name: Release Creation

on:
  workflow_run:
    workflows: ["CMake on multiple platforms", "Bindings Pipeline"]
    types:
      - completed
    branches: [main, dev]

permissions:
  contents: write
  checks: read
  actions: read

jobs:
  check-workflows-and-tag:
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check_release.outputs.should_release }}
      tag_name: ${{ steps.check_tag.outputs.tag_name }}
    steps:
      - name: Debug Workflow Info
        run: |
          echo "Workflow run ID: ${{ github.event.workflow_run.id }}"
          echo "Workflow name: ${{ github.event.workflow_run.name }}"
          echo "Head SHA: ${{ github.event.workflow_run.head_sha }}"
          echo "Head branch: ${{ github.event.workflow_run.head_branch }}"
          echo "Conclusion: ${{ github.event.workflow_run.conclusion }}"

      # Check if this is a tag commit and which workflows have run
      - name: Check workflows completion and tag
        id: check_release
        run: |
          # Only proceed if the triggering workflow succeeded
          if [[ "${{ github.event.workflow_run.conclusion }}" != "success" ]]; then
            echo "Triggering workflow did not succeed"
            echo "should_release=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Get head SHA for this run
          HEAD_SHA="${{ github.event.workflow_run.head_sha }}"
          echo "Commit SHA: $HEAD_SHA"

          # Check if both workflows have completed successfully for this SHA
          echo "Checking CMake workflow..."
          CMAKE_RUNS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/cmake.yml/runs?status=completed&head_sha=$HEAD_SHA")

          CMAKE_SUCCESS=$(echo "$CMAKE_RUNS" | jq '.workflow_runs | map(select(.conclusion == "success")) | length')
          echo "CMake successful runs: $CMAKE_SUCCESS"

          echo "Checking Bindings workflow..."
          BINDINGS_RUNS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/bindings.yml/runs?status=completed&head_sha=$HEAD_SHA")

          BINDINGS_SUCCESS=$(echo "$BINDINGS_RUNS" | jq '.workflow_runs | map(select(.conclusion == "success")) | length')
          echo "Bindings successful runs: $BINDINGS_SUCCESS"

          # Check if this commit has any tags
          echo "Checking for tags..."
          TAGS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/git/refs/tags")

          # Find tags that point to this commit
          MATCHING_TAGS=$(echo "$TAGS" | jq -r ".[] | select(.object.sha == \"$HEAD_SHA\") | .ref" | sed 's|refs/tags/||')
          echo "Matching tags: $MATCHING_TAGS"

          # Make decision
          if [[ "$CMAKE_SUCCESS" -gt 0 && "$BINDINGS_SUCCESS" -gt 0 && -n "$MATCHING_TAGS" ]]; then
            # Both workflows succeeded and there's at least one tag - proceed with release
            echo "Both workflows succeeded and tag found - should create release"
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            # Conditions not met - don't proceed
            echo "Not all conditions met for release:"
            echo "- CMake success: $CMAKE_SUCCESS (need > 0)"
            echo "- Bindings success: $BINDINGS_SUCCESS (need > 0)"
            echo "- Tags found: $MATCHING_TAGS"
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Find appropriate tag
        id: check_tag
        if: steps.check_release.outputs.should_release == 'true'
        run: |
          HEAD_SHA="${{ github.event.workflow_run.head_sha }}"

          # Fetch all tags that point to this commit
          TAGS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/git/refs/tags")

          # Find tags that point to this commit
          MATCHING_TAGS=$(echo "$TAGS" | jq -r ".[] | select(.object.sha == \"$HEAD_SHA\") | .ref" | sed 's|refs/tags/||')

          # Try to find a version tag first (starts with v)
          for TAG in $MATCHING_TAGS; do
            if [[ "$TAG" == v* ]]; then
              echo "Using version tag: $TAG"
              echo "tag_name=$TAG" >> $GITHUB_OUTPUT
              exit 0
            fi
          done

          # If no version tag found, use the first tag
          TAG=$(echo "$MATCHING_TAGS" | head -n 1)
          echo "No version tag found, using first tag: $TAG"
          echo "tag_name=$TAG" >> $GITHUB_OUTPUT

  create-release:
    needs: check-workflows-and-tag
    if: needs.check-workflows-and-tag.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Debug Info
        run: |
          echo "Creating release for tag: ${{ needs.check-workflows-and-tag.outputs.tag_name }}"

      # List available artifacts first for diagnostics
      - name: List Available CMake Artifacts
        run: |
          echo "Trigger commit SHA: ${{ github.event.workflow_run.head_sha }}"
          echo "Current workflow SHA: ${{ github.sha }}"
          echo "Listing available artifacts for CMake workflow..."
          # Get the workflow ID for cmake.yml
          WORKFLOW_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/cmake.yml" | \
            jq -r '.id')
          echo "CMake workflow ID: $WORKFLOW_ID"

          # List all runs for this commit
          RUNS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/$WORKFLOW_ID/runs?head_sha=${{ github.event.workflow_run.head_sha }}")

          RUN_IDS=$(echo "$RUNS" | jq '.workflow_runs[].id')
          echo "Found runs with IDs: $RUN_IDS"

          # Check artifacts for each run
          for RUN_ID in $RUN_IDS; do
            echo "Checking artifacts for run $RUN_ID..."
            ARTIFACTS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/actions/runs/$RUN_ID/artifacts")
            
            ARTIFACT_COUNT=$(echo "$ARTIFACTS" | jq '.total_count')
            ARTIFACT_NAMES=$(echo "$ARTIFACTS" | jq -r '.artifacts[].name')
            
            echo "Found $ARTIFACT_COUNT artifacts: $ARTIFACT_NAMES"
          done

      # Download CMake workflow artifacts - with correct commit SHA
      - name: Download CMake Workflow Artifacts
        id: download_cmake
        uses: dawidd6/action-download-artifact@v6
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: cmake.yml
          workflow_conclusion: success
          commit: ${{github.event.workflow_run.head_sha}}
          path: artifacts/cmake

      # Check if we managed to download artifacts
      - name: Verify Downloaded CMake Artifacts
        run: |
          echo "Checking for CMake artifacts..."
          if [ -d "artifacts/cmake" ] && [ "$(find artifacts/cmake -type f | wc -l)" -gt 0 ]; then
            echo "Listing downloaded CMake artifacts:"
            find artifacts/cmake -type f | sort
          else
            echo "WARNING: No CMake artifacts were downloaded. Creating empty directory."
            mkdir -p artifacts/cmake
          fi

      # Download bindings artifacts - start with Swift package
      - name: Download Swift Package
        id: download_swift
        uses: dawidd6/action-download-artifact@v6
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: bindings.yml
          name: swift_package
          workflow_conclusion: success
          commit: ${{github.event.workflow_run.head_sha}}
          path: artifacts/swift_package

      - name: Verify Swift Package
        run: |
          if [ -d "artifacts/swift_package" ] && [ "$(find artifacts/swift_package -type f | wc -l)" -gt 0 ]; then
            echo "Swift package artifacts found:"
            find artifacts/swift_package -type f | head -5 # Show just the first few for brevity
          else
            echo "WARNING: No Swift package artifacts were downloaded."
            mkdir -p artifacts/swift_package
          fi

      - name: Download WASM Package
        id: download_wasm
        uses: dawidd6/action-download-artifact@v6
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: bindings.yml
          name: c4-wasm
          workflow_conclusion: success
          commit: ${{github.event.workflow_run.head_sha}}
          path: artifacts/wasm

      - name: Verify WASM Package
        run: |
          if [ -d "artifacts/wasm" ] && [ "$(find artifacts/wasm -type f | wc -l)" -gt 0 ]; then
            echo "WASM artifacts found:"
            find artifacts/wasm -type f
          else
            echo "WARNING: No WASM artifacts were downloaded."
            mkdir -p artifacts/wasm
          fi

      - name: Download AAR Package
        id: download_aar
        uses: dawidd6/action-download-artifact@v6
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: bindings.yml
          name: colibri-aar
          workflow_conclusion: success
          commit: ${{github.event.workflow_run.head_sha}}
          path: artifacts/aar

      - name: Verify AAR Package
        run: |
          if [ -d "artifacts/aar" ] && [ "$(find artifacts/aar -type f | wc -l)" -gt 0 ]; then
            echo "AAR artifacts found:"
            find artifacts/aar -type f
          else
            echo "WARNING: No AAR artifacts were downloaded."
            mkdir -p artifacts/aar
          fi

      - name: Download JAR Package
        id: download_jar
        uses: dawidd6/action-download-artifact@v6
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: bindings.yml
          name: colibri-jar
          workflow_conclusion: success
          commit: ${{github.event.workflow_run.head_sha}}
          path: artifacts/jar

      - name: Verify JAR Package
        run: |
          if [ -d "artifacts/jar" ] && [ "$(find artifacts/jar -type f | wc -l)" -gt 0 ]; then
            echo "JAR artifacts found:"
            find artifacts/jar -type f
          else
            echo "WARNING: No JAR artifacts were downloaded."
            mkdir -p artifacts/jar
          fi

      - name: Prepare Release Files
        run: |
          cd artifacts

          # Create release files directory
          mkdir -p release_files

          # Check if we have any files to include in the release
          TOTAL_FILES=0

          # Zip Swift package if not already zipped
          if [ -d "swift_package" ] && [ "$(ls -A swift_package)" ]; then
            cd swift_package
            zip -r ../colibri-swift-package.zip ./*
            cd ..
            if [ -f "colibri-swift-package.zip" ]; then
              mv colibri-swift-package.zip release_files/
              echo "Added Swift package to release"
              TOTAL_FILES=$((TOTAL_FILES+1))
            fi
          else
            echo "Warning: Swift package directory is empty or does not exist"
          fi

          # Move WASM files
          if [ -d "wasm" ] && [ "$(ls -A wasm)" ]; then
            find wasm -name "*.zip" -exec cp {} release_files/ \;
            NUM_FILES=$(find release_files -name "*wasm*.zip" | wc -l)
            if [ "$NUM_FILES" -gt 0 ]; then
              echo "Added $NUM_FILES WASM files to release"
              TOTAL_FILES=$((TOTAL_FILES+NUM_FILES))
            else
              echo "No WASM zip files found to add to release"
            fi
          else
            echo "Warning: WASM directory is empty or does not exist"
          fi

          # Move AAR files
          if [ -d "aar" ] && [ "$(ls -A aar)" ]; then
            find aar -name "*.aar" -exec cp {} release_files/ \;
            NUM_FILES=$(find release_files -name "*.aar" | wc -l)
            if [ "$NUM_FILES" -gt 0 ]; then
              echo "Added $NUM_FILES AAR files to release"
              TOTAL_FILES=$((TOTAL_FILES+NUM_FILES))
            else
              echo "No AAR files found to add to release"
            fi
          else
            echo "Warning: AAR directory is empty or does not exist"
          fi

          # Move JAR files
          if [ -d "jar" ] && [ "$(ls -A jar)" ]; then
            find jar -name "*.jar" -exec cp {} release_files/ \;
            NUM_FILES=$(find release_files -name "*.jar" | wc -l)
            if [ "$NUM_FILES" -gt 0 ]; then
              echo "Added $NUM_FILES JAR files to release"
              TOTAL_FILES=$((TOTAL_FILES+NUM_FILES))
            else
              echo "No JAR files found to add to release"
            fi
          else
            echo "Warning: JAR directory is empty or does not exist"
          fi

          # Move CMake artifacts
          if [ -d "cmake" ] && [ "$(find cmake -type f \( -name "*.zip" -o -name "*.tar.gz" \) | wc -l)" -gt 0 ]; then
            find cmake -type f \( -name "*.zip" -o -name "*.tar.gz" \) -exec cp {} release_files/ \;
            NUM_FILES=$(find release_files -name "*.zip" -o -name "*.tar.gz" | wc -l)
            if [ "$NUM_FILES" -gt 0 ]; then
              echo "Added CMake artifacts to release"
              TOTAL_FILES=$((TOTAL_FILES+NUM_FILES))
            else
              echo "No CMake artifacts found to add to release"
            fi
          else
            echo "Warning: No CMake artifacts found"
          fi

          # List all collected release files
          echo "Collected $TOTAL_FILES release files:"
          ls -la release_files/

          # Create a dummy file if no artifacts were found (to prevent release creation failure)
          if [ "$TOTAL_FILES" -eq 0 ]; then
            echo "WARNING: No artifacts were found for release. Creating a placeholder file."
            echo "This is a placeholder file. No artifacts were found for this release." > release_files/README.txt
          fi

      - name: Create Release
        id: create_release
        continue-on-error: true
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.check-workflows-and-tag.outputs.tag_name }}
          files: artifacts/release_files/*
          generate_release_notes: true
          draft: false
          body: |
            # Colibri Release ${{ needs.check-workflows-and-tag.outputs.tag_name }}

            This release includes binaries and libraries for multiple platforms.

            ## Included Artifacts

            - CMake builds (various platforms)
            - Swift package
            - WASM package
            - Android AAR
            - JVM JAR

            If some artifacts are missing, they may not have been successfully built in the pipeline.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Summary
        if: always()
        run: |
          echo "## Release Creation Result" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.create_release.outcome }}" == "success" ]; then
            echo "✅ Successfully created release for tag ${{ needs.check-workflows-and-tag.outputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Failed to create release for tag ${{ needs.check-workflows-and-tag.outputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
          fi

          echo "### Artifact Summary" >> $GITHUB_STEP_SUMMARY

          if [ -d "artifacts/cmake" ] && [ "$(find artifacts/cmake -type f | wc -l)" -gt 0 ]; then
            echo "- ✅ CMake artifacts: $(find artifacts/cmake -type f | wc -l) files" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ No CMake artifacts found" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -d "artifacts/swift_package" ] && [ "$(find artifacts/swift_package -type f | wc -l)" -gt 0 ]; then
            echo "- ✅ Swift package: $(find artifacts/swift_package -type f | wc -l) files" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ No Swift package found" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -d "artifacts/wasm" ] && [ "$(find artifacts/wasm -type f | wc -l)" -gt 0 ]; then
            echo "- ✅ WASM package: $(find artifacts/wasm -type f | wc -l) files" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ No WASM package found" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -d "artifacts/aar" ] && [ "$(find artifacts/aar -type f | wc -l)" -gt 0 ]; then
            echo "- ✅ AAR package: $(find artifacts/aar -type f | wc -l) files" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ No AAR package found" >> $GITHUB_STEP_SUMMARY
          fi

          if [ -d "artifacts/jar" ] && [ "$(find artifacts/jar -type f | wc -l)" -gt 0 ]; then
            echo "- ✅ JAR package: $(find artifacts/jar -type f | wc -l) files" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ No JAR package found" >> $GITHUB_STEP_SUMMARY
          fi
