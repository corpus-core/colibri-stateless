name: Bindings Pipeline

on:
  push:
    branches: ["main", "dev"]
    tags:
      - "v*" # Trigger on version tags
  pull_request:
    branches: ["main", "dev"]

# Add permissions block at the top level
permissions:
  contents: write # Required for creating releases and uploading assets
  checks: write
  pull-requests: write
  actions: read

jobs:
  generate-java-sources:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "11"

      - name: Install SWIG
        run: sudo apt-get update && sudo apt-get install -y swig

      - name: Install CMake
        run: sudo apt-get install -y cmake

      - name: Configure CMake
        run: cmake -S . -B build -DGENERATE_JAVA_SOURCES=ON -DCMAKE_BUILD_TYPE=Release -DCURL=false -DKOTLIN=true -DTEST=false -DWASM=false -DCLI=false

      - name: Build
        run: cmake --build build --target c4_java

      - name: Copy generated Java sources
        run: |
          mkdir -p bindings/kotlin/generated/java
          cp -r build/bindings/kotlin/java/* bindings/kotlin/generated/java/

      - name: Upload generated Java sources
        uses: actions/upload-artifact@v4 # Updated to v4
        with:
          name: generated-java-sources
          path: bindings/kotlin/generated/java

  build-native-macos:
    runs-on: macos-latest
    needs: [generate-java-sources]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install CMake
        run: brew install cmake

      - name: Install SWIG
        run: brew install swig

      - name: Configure CMake
        run: cmake -S . -B build-macos -DGENERATE_JAVA_SOURCES=OFF -DCMAKE_BUILD_TYPE=Release  -DCURL=false -DKOTLIN=true -DTEST=false -DWASM=false -DCLI=false

      - name: Build
        run: cmake --build build-macos --target c4_java

      - name: Create native-libs directory
        run: mkdir -p bindings/kotlin/native-libs/darwin-aarch64

      - name: Copy library
        run: cp build-macos/bindings/kotlin/libc4_java.jnilib bindings/kotlin/native-libs/darwin-aarch64/libc4_java.jnilib

      - name: Upload native-libs
        uses: actions/upload-artifact@v4 # Updated to v4
        with:
          name: native-libs-macos
          path: bindings/kotlin/native-libs/

  build-native-windows:
    runs-on: windows-latest
    needs: [generate-java-sources]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure CMake
        run: cmake -S . -B build-windows -DGENERATE_JAVA_SOURCES=OFF -A x64  -DCURL=false -DKOTLIN=true -DTEST=false -DWASM=false -DCLI=false

      - name: Build
        run: cmake --build build-windows --config Release --target c4_java

      - name: Create native-libs directory
        run: mkdir bindings\kotlin\native-libs\win32-x86-64

      - name: Copy library
        run: copy build-windows\bindings\kotlin\Release\c4_java.dll bindings\kotlin\native-libs\win32-x86-64\

      - name: Upload native-libs
        uses: actions/upload-artifact@v4 # Updated to v4
        with:
          name: native-libs-windows
          path: bindings/kotlin/native-libs/

  build-native-linux:
    runs-on: ubuntu-latest
    needs: [generate-java-sources]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install CMake
        run: sudo apt-get install -y cmake

      - name: Configure CMake
        run: cmake -S . -B build-linux -DGENERATE_JAVA_SOURCES=OFF -DCMAKE_BUILD_TYPE=Release  -DCURL=false -DKOTLIN=true -DTEST=false -DWASM=false -DCLI=false

      - name: Build
        run: cmake --build build-linux --target c4_java

      - name: Create native-libs directory
        run: mkdir -p bindings/kotlin/native-libs/linux-x86-64

      - name: Copy library
        run: cp build-linux/bindings/kotlin/libc4_java.so bindings/kotlin/native-libs/linux-x86-64/

      - name: Upload native-libs
        uses: actions/upload-artifact@v4 # Updated to v4
        with:
          name: native-libs-linux
          path: bindings/kotlin/native-libs/

  build-native-linux-aarch64:
    runs-on: ubuntu-latest
    needs: [generate-java-sources]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Configure CMake
        run: |
          # Set cross-compilation environment variables
          export CC=aarch64-linux-gnu-gcc
          export CXX=aarch64-linux-gnu-g++
          export AR=aarch64-linux-gnu-ar
          export RANLIB=aarch64-linux-gnu-ranlib
          export AS=aarch64-linux-gnu-as
          export STRIP=aarch64-linux-gnu-strip

          cmake -S . -B build-linux-arm64 \
            -DCMAKE_C_COMPILER=aarch64-linux-gnu-gcc \
            -DCMAKE_CXX_COMPILER=aarch64-linux-gnu-g++ \
            -DCMAKE_SYSTEM_NAME=Linux \
            -DCMAKE_SYSTEM_PROCESSOR=aarch64 \
            -DCMAKE_AR=/usr/bin/aarch64-linux-gnu-ar \
            -DCMAKE_RANLIB=/usr/bin/aarch64-linux-gnu-ranlib \
            -DGENERATE_JAVA_SOURCES=OFF \
            -DCMAKE_BUILD_TYPE=Release \
            -DCURL=false \
            -DKOTLIN=true \
            -DTEST=false \
            -DWASM=false \
            -DCLI=false

      - name: Build
        run: cmake --build build-linux-arm64 --target c4_java

      - name: Create native-libs directory
        run: mkdir -p bindings/kotlin/native-libs/linux-aarch64

      - name: Copy library
        run: cp build-linux-arm64/bindings/kotlin/libc4_java.so bindings/kotlin/native-libs/linux-aarch64/

      - name: Upload native-libs
        uses: actions/upload-artifact@v4
        with:
          name: native-libs-linux-aarch64
          path: bindings/kotlin/native-libs/

  build-publish-jar:
    runs-on: ubuntu-latest
    needs:
      [
        build-native-macos,
        build-native-windows,
        build-native-linux,
        build-native-linux-aarch64,
        generate-java-sources,
      ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download generated Java sources
        uses: actions/download-artifact@v4 # Updated to v4
        with:
          name: generated-java-sources
          path: bindings/kotlin/generated/java

      - name: Download native-libs-macos
        uses: actions/download-artifact@v4 # Updated to v4
        with:
          name: native-libs-macos
          path: bindings/kotlin/native-libs

      - name: Download native-libs-windows
        uses: actions/download-artifact@v4 # Updated to v4
        with:
          name: native-libs-windows
          path: bindings/kotlin/native-libs

      - name: Download native-libs-linux
        uses: actions/download-artifact@v4 # Updated to v4
        with:
          name: native-libs-linux
          path: bindings/kotlin/native-libs

      - name: Download native-libs-linux-aarch64
        uses: actions/download-artifact@v4 # Updated to v4
        with:
          name: native-libs-linux-aarch64
          path: bindings/kotlin/native-libs

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: "adopt"
          java-version: "11"

      - name: Build and publish JAR
        run: cd bindings/kotlin && ./gradlew -b build-jar.gradle.kts build -PgeneratedSourcesPath="generated/java"
      #      run: cd bindings/kotlin && ./gradlew -b build-jar.gradle.kts build publish -PmavenUsername=${{ secrets.MAVEN_USERNAME }} -PmavenPassword=${{ secrets.MAVEN_PASSWORD }}

      - name: Debug - List build directory
        run: find bindings/kotlin -name "*.jar"

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: colibri-jar
          path: bindings/kotlin/build/libs/*.jar
          if-no-files-found: error

  build-publish-aar:
    runs-on: ubuntu-latest
    needs: [generate-java-sources]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download generated Java sources
        uses: actions/download-artifact@v4
        with:
          name: generated-java-sources
          path: bindings/kotlin/generated/java

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "17"

      - name: Set Android SDK environment variables
        run: |
          echo "ANDROID_HOME=/usr/local/lib/android/sdk" >> $GITHUB_ENV
          echo "ANDROID_SDK_ROOT=/usr/local/lib/android/sdk" >> $GITHUB_ENV
          echo "PATH=$PATH:/usr/local/lib/android/sdk/cmdline-tools/latest/bin:/usr/local/lib/android/sdk/platform-tools" >> $GITHUB_PATH

      - name: Install Android SDK and NDK
        run: |
          yes | /usr/local/lib/android/sdk/cmdline-tools/latest/bin/sdkmanager "platforms;android-33" "build-tools;33.0.0" "ndk;26.1.10909125"

      - name: Build AAR
        run: |
          cd bindings/kotlin
          ./gradlew -b build-aar.gradle.kts build -PgeneratedSourcesPath="generated/java"

      - name: Upload AAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: colibri-aar
          path: bindings/kotlin/build/outputs/aar/*.aar
          if-no-files-found: error

      # Optional: Upload to Maven repository
      #- name: Publish AAR
      #  run: |
      #    cd bindings/kotlin
      #    ./gradlew -b build-aar.gradle.kts publish \
      #      -PmavenUsername=${{ secrets.MAVEN_USERNAME }} \
      #      -PmavenPassword=${{ secrets.MAVEN_PASSWORD }}

  swift:
    runs-on: macos-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install CMake
        run: brew install cmake

      - name: Build x86_64 (Simulator)
        run: |
          xcrun --sdk iphonesimulator --show-sdk-path
          cmake -DSWIFT=true -DCMAKE_SYSTEM_NAME=iOS -DCMAKE_OSX_SYSROOT=$(xcrun --sdk iphonesimulator --show-sdk-path) -B build_x86 -DCMAKE_OSX_ARCHITECTURES=x86_64 -DCMAKE_OSX_DEPLOYMENT_TARGET=13.0 .
          cd build_x86
          make
          cd ..

      - name: Build arm64 (Device)
        run: |
          cmake -DSWIFT=true -DCMAKE_OSX_ARCHITECTURES=arm64 -DSWIFT_X86_BUILD=$(pwd)/build_x86 -B build .
          cd build
          make
          cd ..

      - name: Prepare Swift Package
        run: |
          mkdir -p swift_package
          cp -r bindings/swift/* swift_package/
          cp -r build/c4_swift.xcframework swift_package/
          rm -rf swift_package/CMakeLists.txt

      - name: Upload Swift Package
        uses: actions/upload-artifact@v4
        with:
          name: swift_package
          path: swift_package

      - name: Update Swift Package Repository
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          # Clone the Swift package repository
          git clone https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/corpus-core/colibri-stateless-swift.git

          # Copy updated files
          cp -r swift_package/* colibri-stateless-swift/

          # Update version in Package.swift for release
          VERSION=${GITHUB_REF#refs/tags/v}
          cd colibri-stateless-swift

          # Configure git
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

          # Commit and push changes
          git add .
          git commit -m "Release ${VERSION}"
          git tag "v${VERSION}"
          git push origin main --tags
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}

  emscripten:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Emscripten
        uses: mymindstorm/setup-emsdk@v14

      - name: Build with Emscripten
        run: |
          emcmake cmake -B build -DWASM=true -DCLI=false -DTEST=false -DCURL=false -DCMAKE_BUILD_TYPE=MINSIZREL -S .
          cmake --build build

      - name: Create WASM Package
        run: |
          cd build/emscripten
          zip -r ../../colibri-wasm.zip ./*
          cd ../..

      - name: Upload WASM
        uses: actions/upload-artifact@v4
        with:
          name: c4-wasm
          path: colibri-wasm.zip

      - name: Set package version from tag
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          echo "Setting version to $TAG_VERSION in package.json"
          npm version $TAG_VERSION --no-git-tag-version
        working-directory: build/emscripten

      - name: Publish to npm
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        working-directory: build/emscripten

  docker-proofer:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t colibri-server -f bindings/docker/Dockerfile .
