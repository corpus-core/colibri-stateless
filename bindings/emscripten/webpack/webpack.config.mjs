import path from 'path';
// import HtmlWebpackPlugin from 'html-webpack-plugin';
import CopyPlugin from "copy-webpack-plugin";
import { fileURLToPath } from 'url';
import { dirname } from 'path';

// Import the generated config to get the build directory path
import { emscriptenBuildDir } from './webpack_build_config.mjs';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

export default {
    // Entry point for the application
    entry: './src/index.js',
    output: {
        // Output bundle name
        filename: 'main.js',
        // Output directory (absolute path)
        path: path.resolve(__dirname, 'dist'),
        // Public path for assets. '' tells webpack to use relative paths.
        publicPath: ''
    },
    // Mode can be 'development' or 'production'
    mode: 'development',
    // Configuration for the development server (optional, for local testing)
    devServer: {
        static: {
            // Serve files from the 'webpack' directory
            directory: path.join(__dirname),
        },
        compress: true,
        port: 9000, // Port for the dev server
    },
    resolve: {
        // Enable importing JS files without specifying their extension
        extensions: ['.js'],
        alias: {
            // Use the dynamically determined path from the generated config
            '@c4w': emscriptenBuildDir
        },
        // Needed for resolving '.wasm' files if not using default rules
        // extensions: ['.js', '.wasm'],
        // Provide fallbacks for Node.js core modules that Emscripten might reference.
        // Setting them to 'false' tells Webpack to provide an empty module.
        fallback: {
            "fs": false,
            "path": false, // Often needed alongside fs
            "module": false,
            "crypto": false // Sometimes needed depending on Emscripten flags
        }
    },
    // Enable experimental features needed for async WASM
    experiments: {
        asyncWebAssembly: true // Still potentially useful for other async operations
    },
    module: {
        rules: [
            // Remove the rule that treats WASM as an async module:
            // { 
            //    test: /\.wasm$/,
            //    type: "webassembly/async",
            // },

            // Add a rule to copy the specific .wasm file as an asset (REMOVED as using SINGLE_FILE=1)
            // {
            //  test: /c4w\.wasm$/,
            //  type: 'asset/resource',
            //  generator: {
            //    // Output the wasm file to the 'dist' directory, keeping its original name
            //    filename: '[name][ext]'
            //  }
            // }
        ],
    },
    // Optional: Ignore fs warnings often generated by Emscripten modules if targeting web
    // stats: {
    //   warningsFilter: [/node_modules\/fs/]
    // }
}; 